package com.amazonaws.dynamodb

import smithy4s.Schema
import smithy4s.Hints
import smithy4s.ShapeId
import smithy4s.schema.Schema.struct
import smithy4s.ShapeTag

case class AttributeValueUpdate(value: Option[AttributeValue] = None, action: Option[AttributeAction] = None)
object AttributeValueUpdate extends ShapeTag.Companion[AttributeValueUpdate] {
  val id: ShapeId = ShapeId("com.amazonaws.dynamodb", "AttributeValueUpdate")

  val hints : Hints = Hints(
    smithy.api.Documentation("<p>For the <code>UpdateItem</code> operation, represents the attributes to be modified,\n            the action to perform on each, and the new value for each.</p>\n        <note>\n            <p>You cannot use <code>UpdateItem</code> to update any primary key attributes.\n                Instead, you will need to delete the item, and then use <code>PutItem</code> to\n                create a new item with new attributes.</p>\n        </note>\n        <p>Attribute values cannot be null; string and binary type attributes must have lengths\n            greater than zero; and set type attributes must not be empty. Requests with empty values\n            will be rejected with a <code>ValidationException</code> exception.</p>"),
  )

  implicit val schema: Schema[AttributeValueUpdate] = struct(
    AttributeValue.schema.optional[AttributeValueUpdate]("Value", _.value).addHints(smithy.api.Documentation("<p>Represents the data for an attribute.</p>\n        <p>Each attribute value is described as a name-value pair. The name is the data type, and\n            the value is the data itself.</p>\n        <p>For more information, see <a href=\"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes\">Data Types</a> in the <i>Amazon DynamoDB Developer Guide</i>.\n        </p>")),
    AttributeAction.schema.optional[AttributeValueUpdate]("Action", _.action).addHints(smithy.api.Documentation("<p>Specifies how to perform the update. Valid values are <code>PUT</code> (default),\n                <code>DELETE</code>, and <code>ADD</code>. The behavior depends on whether the\n            specified primary key already exists in the table.</p>\n\n        <p>\n            <b>If an item with the specified <i>Key</i> is found in\n                the table:</b>\n        </p>\n\n        <ul>\n            <li>\n                <p>\n                    <code>PUT</code> - Adds the specified attribute to the item. If the attribute\n                    already exists, it is replaced by the new value. </p>\n            </li>\n            <li>\n                <p>\n                    <code>DELETE</code> - If no value is specified, the attribute and its value are\n                    removed from the item. The data type of the specified value must match the\n                    existing value\'s data type.</p>\n                <p>If a <i>set</i> of values is specified, then those values are\n                    subtracted from the old set. For example, if the attribute value was the set\n                        <code>[a,b,c]</code> and the <code>DELETE</code> action specified\n                        <code>[a,c]</code>, then the final attribute value would be\n                    <code>[b]</code>. Specifying an empty set is an error.</p>\n            </li>\n            <li>\n                <p>\n                    <code>ADD</code> - If the attribute does not already exist, then the attribute\n                    and its values are added to the item. If the attribute does exist, then the\n                    behavior of <code>ADD</code> depends on the data type of the attribute:</p>\n                <ul>\n                  <li>\n                        <p>If the existing attribute is a number, and if <code>Value</code> is\n                            also a number, then the <code>Value</code> is mathematically added to\n                            the existing attribute. If <code>Value</code> is a negative number, then\n                            it is subtracted from the existing attribute.</p>\n                        <note>\n                            <p> If you use <code>ADD</code> to increment or decrement a number\n                                value for an item that doesn\'t exist before the update, DynamoDB\n                                uses 0 as the initial value.</p>\n                            <p>In addition, if you use <code>ADD</code> to update an existing\n                                item, and intend to increment or decrement an attribute value which\n                                does not yet exist, DynamoDB uses <code>0</code> as the initial\n                                value. For example, suppose that the item you want to update does\n                                not yet have an attribute named <i>itemcount</i>, but\n                                you decide to <code>ADD</code> the number <code>3</code> to this\n                                attribute anyway, even though it currently does not exist. DynamoDB\n                                will create the <i>itemcount</i> attribute, set its\n                                initial value to <code>0</code>, and finally add <code>3</code> to\n                                it. The result will be a new <i>itemcount</i>\n                                attribute in the item, with a value of <code>3</code>.</p>\n                        </note>\n                    </li>\n                  <li>\n                        <p>If the existing data type is a set, and if the <code>Value</code> is\n                            also a set, then the <code>Value</code> is added to the existing set.\n                            (This is a <i>set</i> operation, not mathematical\n                            addition.) For example, if the attribute value was the set\n                                <code>[1,2]</code>, and the <code>ADD</code> action specified\n                                <code>[3]</code>, then the final attribute value would be\n                                <code>[1,2,3]</code>. An error occurs if an Add action is specified\n                            for a set attribute and the attribute type specified does not match the\n                            existing set type. </p>\n                        <p>Both sets must have the same primitive data type. For example, if the\n                            existing data type is a set of strings, the <code>Value</code> must also\n                            be a set of strings. The same holds true for number sets and binary\n                            sets.</p>\n                    </li>\n               </ul>\n                <p>This action is only valid for an existing attribute whose data type is number\n                    or is a set. Do not use <code>ADD</code> for any other data types.</p>\n            </li>\n         </ul>\n\n        <p>\n            <b>If no item with the specified <i>Key</i> is\n                found:</b>\n        </p>\n\n        <ul>\n            <li>\n                <p>\n                    <code>PUT</code> - DynamoDB creates a new item with the specified primary key,\n                    and then adds the attribute. </p>\n            </li>\n            <li>\n                <p>\n                    <code>DELETE</code> - Nothing happens; there is no attribute to delete.</p>\n            </li>\n            <li>\n                <p>\n                    <code>ADD</code> - DynamoDB creates a new item with the supplied primary key and\n                    number (or set) for the attribute value. The only data types allowed\n                    are number, number set, string set or binary set.</p> \n            </li>\n         </ul>")),
  ){
    AttributeValueUpdate.apply
  }.withId(id).addHints(hints)
}