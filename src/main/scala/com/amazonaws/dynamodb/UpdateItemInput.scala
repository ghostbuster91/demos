package com.amazonaws.dynamodb

import smithy4s.Schema
import smithy4s.Hints
import smithy4s.ShapeId
import smithy4s.schema.Schema.struct
import smithy4s.ShapeTag

case class UpdateItemInput(tableName: TableName, key: Map[AttributeName,AttributeValue], attributeUpdates: Option[Map[AttributeName,AttributeValueUpdate]] = None, expected: Option[Map[AttributeName,ExpectedAttributeValue]] = None, conditionalOperator: Option[ConditionalOperator] = None, returnValues: Option[ReturnValue] = None, returnConsumedCapacity: Option[ReturnConsumedCapacity] = None, returnItemCollectionMetrics: Option[ReturnItemCollectionMetrics] = None, updateExpression: Option[UpdateExpression] = None, conditionExpression: Option[ConditionExpression] = None, expressionAttributeNames: Option[Map[ExpressionAttributeNameVariable,AttributeName]] = None, expressionAttributeValues: Option[Map[ExpressionAttributeValueVariable,AttributeValue]] = None)
object UpdateItemInput extends ShapeTag.Companion[UpdateItemInput] {
  val id: ShapeId = ShapeId("com.amazonaws.dynamodb", "UpdateItemInput")

  val hints : Hints = Hints(
    smithy.api.Documentation("<p>Represents the input of an <code>UpdateItem</code> operation.</p>"),
  )

  implicit val schema: Schema[UpdateItemInput] = struct(
    TableName.schema.required[UpdateItemInput]("TableName", _.tableName).addHints(smithy.api.Documentation("<p>The name of the table containing the item to update.</p>"), smithy.api.Required()),
    Key.underlyingSchema.required[UpdateItemInput]("Key", _.key).addHints(smithy.api.Documentation("<p>The primary key of the item to be updated. Each element consists of an attribute name\n            and a value for that attribute.</p>\n        <p>For the primary key, you must provide all of the attributes. For example, with a\n            simple primary key, you only need to provide a value for the partition key. For a\n            composite primary key, you must provide values for both the partition key and the sort\n            key.</p>"), smithy.api.Required()),
    AttributeUpdates.underlyingSchema.optional[UpdateItemInput]("AttributeUpdates", _.attributeUpdates).addHints(smithy.api.Documentation("<p>This is a legacy parameter. Use <code>UpdateExpression</code> instead. For more\n            information, see <a href=\"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.AttributeUpdates.html\">AttributeUpdates</a> in the <i>Amazon DynamoDB Developer\n                Guide</i>.</p>")),
    ExpectedAttributeMap.underlyingSchema.optional[UpdateItemInput]("Expected", _.expected).addHints(smithy.api.Documentation("<p>This is a legacy parameter. Use <code>ConditionExpression</code> instead. For more\n            information, see <a href=\"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.Expected.html\">Expected</a> in the <i>Amazon DynamoDB Developer\n            Guide</i>.</p>")),
    ConditionalOperator.schema.optional[UpdateItemInput]("ConditionalOperator", _.conditionalOperator).addHints(smithy.api.Documentation("<p>This is a legacy parameter. Use <code>ConditionExpression</code> instead. For more\n            information, see <a href=\"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.ConditionalOperator.html\">ConditionalOperator</a> in the <i>Amazon DynamoDB Developer\n                Guide</i>.</p>")),
    ReturnValue.schema.optional[UpdateItemInput]("ReturnValues", _.returnValues).addHints(smithy.api.Documentation("<p>Use <code>ReturnValues</code> if you want to get the item attributes as they appear\n            before or after they are updated. For <code>UpdateItem</code>, the valid values\n            are:</p>\n        <ul>\n            <li>\n                <p>\n                    <code>NONE</code> - If <code>ReturnValues</code> is not specified, or if its\n                    value is <code>NONE</code>, then nothing is returned. (This setting is the\n                    default for <code>ReturnValues</code>.)</p>\n            </li>\n            <li>\n                <p>\n                    <code>ALL_OLD</code> - Returns all of the attributes of the item, as they\n                    appeared before the UpdateItem operation.</p>\n            </li>\n            <li>\n                <p>\n                    <code>UPDATED_OLD</code> - Returns only the updated attributes, as they appeared\n                    before the UpdateItem operation.</p>\n            </li>\n            <li>\n                <p>\n                    <code>ALL_NEW</code> - Returns all of the attributes of the item, as they appear\n                    after the UpdateItem operation.</p>\n            </li>\n            <li>\n                <p>\n                    <code>UPDATED_NEW</code> - Returns only the updated attributes, as they appear\n                    after the UpdateItem operation.</p>\n            </li>\n         </ul>\n        <p>There is no additional cost associated with requesting a return value aside from the\n            small network and processing overhead of receiving a larger response. No read capacity\n            units are consumed.</p>\n        <p>The values returned are strongly consistent.</p>")),
    ReturnConsumedCapacity.schema.optional[UpdateItemInput]("ReturnConsumedCapacity", _.returnConsumedCapacity),
    ReturnItemCollectionMetrics.schema.optional[UpdateItemInput]("ReturnItemCollectionMetrics", _.returnItemCollectionMetrics).addHints(smithy.api.Documentation("<p>Determines whether item collection metrics are returned. If set to <code>SIZE</code>,\n            the response includes statistics about item collections, if any, that were modified\n            during the operation are returned in the response. If set to <code>NONE</code> (the\n            default), no statistics are returned.</p>")),
    UpdateExpression.schema.optional[UpdateItemInput]("UpdateExpression", _.updateExpression).addHints(smithy.api.Documentation("<p>An expression that defines one or more attributes to be updated, the action to be\n            performed on them, and new values for them.</p>\n        <p>The following action values are available for <code>UpdateExpression</code>.</p>\n        <ul>\n            <li>\n                <p>\n                    <code>SET</code> - Adds one or more attributes and values to an item. If any of\n                    these attributes already exist, they are replaced by the new values. You can\n                    also use <code>SET</code> to add or subtract from an attribute that is of type\n                    Number. For example: <code>SET myNum = myNum + :val</code>\n                </p>\n                <p>\n                    <code>SET</code> supports the following functions:</p>\n                <ul>\n                  <li>\n                        <p>\n                            <code>if_not_exists (path, operand)</code> - if the item does not\n                            contain an attribute at the specified path, then\n                                <code>if_not_exists</code> evaluates to operand; otherwise, it\n                            evaluates to path. You can use this function to avoid overwriting an\n                            attribute that may already be present in the item.</p>\n                    </li>\n                  <li>\n                        <p>\n                            <code>list_append (operand, operand)</code> - evaluates to a list with a\n                            new element added to it. You can append the new element to the start or\n                            the end of the list by reversing the order of the operands.</p>\n                    </li>\n               </ul>\n                <p>These function names are case-sensitive.</p>\n            </li>\n            <li>\n                <p>\n                    <code>REMOVE</code> - Removes one or more attributes from an item.</p>\n            </li>\n            <li>\n                <p>\n                    <code>ADD</code> - Adds the specified value to the item, if the attribute does\n                    not already exist. If the attribute does exist, then the behavior of\n                        <code>ADD</code> depends on the data type of the attribute:</p>\n                <ul>\n                  <li>\n                        <p>If the existing attribute is a number, and if <code>Value</code> is\n                            also a number, then <code>Value</code> is mathematically added to the\n                            existing attribute. If <code>Value</code> is a negative number, then it\n                            is subtracted from the existing attribute.</p>\n                        <note>\n                            <p>If you use <code>ADD</code> to increment or decrement a number\n                                value for an item that doesn\'t exist before the update, DynamoDB\n                                uses <code>0</code> as the initial value.</p>\n                            <p>Similarly, if you use <code>ADD</code> for an existing item to\n                                increment or decrement an attribute value that doesn\'t exist before\n                                the update, DynamoDB uses <code>0</code> as the initial value. For\n                                example, suppose that the item you want to update doesn\'t have an\n                                attribute named <code>itemcount</code>, but you decide to\n                                    <code>ADD</code> the number <code>3</code> to this attribute\n                                anyway. DynamoDB will create the <code>itemcount</code> attribute,\n                                set its initial value to <code>0</code>, and finally add\n                                    <code>3</code> to it. The result will be a new\n                                    <code>itemcount</code> attribute in the item, with a value of\n                                    <code>3</code>.</p>\n                        </note>\n                    </li>\n                  <li>\n                        <p>If the existing data type is a set and if <code>Value</code> is also a\n                            set, then <code>Value</code> is added to the existing set. For example,\n                            if the attribute value is the set <code>[1,2]</code>, and the\n                                <code>ADD</code> action specified <code>[3]</code>, then the final\n                            attribute value is <code>[1,2,3]</code>. An error occurs if an\n                                <code>ADD</code> action is specified for a set attribute and the\n                            attribute type specified does not match the existing set type. </p>\n                        <p>Both sets must have the same primitive data type. For example, if the\n                            existing data type is a set of strings, the <code>Value</code> must also\n                            be a set of strings.</p>\n                    </li>\n               </ul>\n                <important>\n                    <p>The <code>ADD</code> action only supports Number and set data types. In\n                        addition, <code>ADD</code> can only be used on top-level attributes, not\n                        nested attributes.</p>\n                </important>\n            </li>\n            <li>\n                <p>\n                    <code>DELETE</code> - Deletes an element from a set.</p>\n                <p>If a set of values is specified, then those values are subtracted from the old\n                    set. For example, if the attribute value was the set <code>[a,b,c]</code> and\n                    the <code>DELETE</code> action specifies <code>[a,c]</code>, then the final\n                    attribute value is <code>[b]</code>. Specifying an empty set is an error.</p>\n                <important>\n                    <p>The <code>DELETE</code> action only supports set data types. In addition,\n                            <code>DELETE</code> can only be used on top-level attributes, not nested\n                        attributes.</p>\n                </important>\n\n            </li>\n         </ul>\n        <p>You can have many actions in a single expression, such as the following: <code>SET\n                a=:value1, b=:value2 DELETE :value3, :value4, :value5</code>\n        </p>\n        <p>For more information on update expressions, see <a href=\"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.Modifying.html\">Modifying\n                Items and Attributes</a> in the <i>Amazon DynamoDB Developer\n                Guide</i>.</p>")),
    ConditionExpression.schema.optional[UpdateItemInput]("ConditionExpression", _.conditionExpression).addHints(smithy.api.Documentation("<p>A condition that must be satisfied in order for a conditional update to\n            succeed.</p>\n        <p>An expression can contain any of the following:</p>\n        <ul>\n            <li>\n                <p>Functions: <code>attribute_exists | attribute_not_exists | attribute_type |\n                        contains | begins_with | size</code>\n                </p>\n                <p>These function names are case-sensitive.</p>\n            </li>\n            <li>\n                <p>Comparison operators: <code>= | <> |\n            < | > | <= | >= |\n            BETWEEN | IN </code>\n                </p>\n            </li>\n            <li>\n                <p> Logical operators: <code>AND | OR | NOT</code>\n                </p>\n            </li>\n         </ul>\n        <p>For more information about condition expressions, see <a href=\"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.SpecifyingConditions.html\">Specifying Conditions</a> in the <i>Amazon DynamoDB Developer\n                Guide</i>.</p>")),
    ExpressionAttributeNameMap.underlyingSchema.optional[UpdateItemInput]("ExpressionAttributeNames", _.expressionAttributeNames).addHints(smithy.api.Documentation("<p>One or more substitution tokens for attribute names in an expression. The following\n            are some use cases for using <code>ExpressionAttributeNames</code>:</p>\n        <ul>\n            <li>\n                <p>To access an attribute whose name conflicts with a DynamoDB reserved\n                    word.</p>\n            </li>\n            <li>\n                <p>To create a placeholder for repeating occurrences of an attribute name in an\n                    expression.</p>\n            </li>\n            <li>\n                <p>To prevent special characters in an attribute name from being misinterpreted\n                    in an expression.</p>\n            </li>\n         </ul>\n        <p>Use the <b>#</b> character in an expression to dereference\n            an attribute name. For example, consider the following attribute name:</p>\n        <ul>\n            <li>\n                <p>\n                    <code>Percentile</code>\n                </p>\n            </li>\n         </ul>\n        <p>The name of this attribute conflicts with a reserved word, so it cannot be used\n            directly in an expression. (For the complete list of reserved words, see <a href=\"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html\">Reserved Words</a> in the <i>Amazon DynamoDB Developer\n            Guide</i>.) To work around this, you could specify the following for\n                <code>ExpressionAttributeNames</code>:</p>\n        <ul>\n            <li>\n                <p>\n                    <code>{\"#P\":\"Percentile\"}</code>\n                </p>\n            </li>\n         </ul>\n        <p>You could then use this substitution in an expression, as in this example:</p>\n        <ul>\n            <li>\n                <p>\n                    <code>#P = :val</code>\n                </p>\n            </li>\n         </ul>\n        <note>\n            <p>Tokens that begin with the <b>:</b> character are\n                    <i>expression attribute values</i>, which are placeholders for the\n                actual value at runtime.</p>\n        </note>\n        <p>For more information about expression attribute names, see <a href=\"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html\">Specifying Item Attributes</a> in the <i>Amazon DynamoDB Developer\n                Guide</i>.</p>")),
    ExpressionAttributeValueMap.underlyingSchema.optional[UpdateItemInput]("ExpressionAttributeValues", _.expressionAttributeValues).addHints(smithy.api.Documentation("<p>One or more values that can be substituted in an expression.</p>\n        <p>Use the <b>:</b> (colon) character in an expression to\n            dereference an attribute value. For example, suppose that you wanted to check whether\n            the value of the <code>ProductStatus</code> attribute was one of the following: </p>\n        <p>\n            <code>Available | Backordered | Discontinued</code>\n        </p>\n        <p>You would first need to specify <code>ExpressionAttributeValues</code> as\n            follows:</p>\n        <p>\n            <code>{ \":avail\":{\"S\":\"Available\"}, \":back\":{\"S\":\"Backordered\"},\n                \":disc\":{\"S\":\"Discontinued\"} }</code>\n        </p>\n        <p>You could then use these values in an expression, such as this:</p>\n        <p>\n            <code>ProductStatus IN (:avail, :back, :disc)</code>\n        </p>\n        <p>For more information on expression attribute values, see <a href=\"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.SpecifyingConditions.html\">Condition Expressions</a> in the <i>Amazon DynamoDB Developer\n                Guide</i>.</p>")),
  ){
    UpdateItemInput.apply
  }.withId(id).addHints(hints)
}