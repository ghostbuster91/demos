package com.amazonaws.dynamodb

import smithy4s.Schema
import smithy4s.Hints
import smithy4s.ShapeId
import smithy4s.schema.Schema.struct
import smithy4s.ShapeTag

case class KeysAndAttributes(keys: List[Map[AttributeName,AttributeValue]], attributesToGet: Option[List[AttributeName]] = None, consistentRead: Option[ConsistentRead] = None, projectionExpression: Option[ProjectionExpression] = None, expressionAttributeNames: Option[Map[ExpressionAttributeNameVariable,AttributeName]] = None)
object KeysAndAttributes extends ShapeTag.Companion[KeysAndAttributes] {
  val id: ShapeId = ShapeId("com.amazonaws.dynamodb", "KeysAndAttributes")

  val hints : Hints = Hints(
    smithy.api.Documentation("<p>Represents a set of primary keys and, for each key, the attributes to retrieve from\n            the table.</p>\n        <p>For each primary key, you must provide <i>all</i> of the key attributes.\n            For example, with a simple primary key, you only need to provide the partition key. For\n            a composite primary key, you must provide <i>both</i> the partition key\n            and the sort key.</p>"),
  )

  implicit val schema: Schema[KeysAndAttributes] = struct(
    KeyList.underlyingSchema.required[KeysAndAttributes]("Keys", _.keys).addHints(smithy.api.Documentation("<p>The primary key attribute values that define the items and the attributes associated\n            with the items.</p>"), smithy.api.Required()),
    AttributeNameList.underlyingSchema.optional[KeysAndAttributes]("AttributesToGet", _.attributesToGet).addHints(smithy.api.Documentation("<p>This is a legacy parameter. Use <code>ProjectionExpression</code> instead. For more\n            information, see <a href=\"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.html\">Legacy\n                Conditional Parameters</a> in the <i>Amazon DynamoDB Developer\n                Guide</i>.</p>")),
    ConsistentRead.schema.optional[KeysAndAttributes]("ConsistentRead", _.consistentRead).addHints(smithy.api.Box(), smithy.api.Documentation("<p>The consistency of a read operation. If set to <code>true</code>, then a strongly\n            consistent read is used; otherwise, an eventually consistent read is used.</p>")),
    ProjectionExpression.schema.optional[KeysAndAttributes]("ProjectionExpression", _.projectionExpression).addHints(smithy.api.Documentation("<p>A string that identifies one or more attributes to retrieve from the table. These\n            attributes can include scalars, sets, or elements of a JSON document. The attributes in\n            the <code>ProjectionExpression</code> must be separated by commas.</p>\n        <p>If no attribute names are specified, then all attributes will be returned. If any of\n            the requested attributes are not found, they will not appear in the result.</p>\n        <p>For more information, see <a href=\"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html\">Accessing Item Attributes</a> in the <i>Amazon DynamoDB Developer\n                Guide</i>.</p>")),
    ExpressionAttributeNameMap.underlyingSchema.optional[KeysAndAttributes]("ExpressionAttributeNames", _.expressionAttributeNames).addHints(smithy.api.Documentation("<p>One or more substitution tokens for attribute names in an expression. The following\n            are some use cases for using <code>ExpressionAttributeNames</code>:</p>\n        <ul>\n            <li>\n                <p>To access an attribute whose name conflicts with a DynamoDB reserved\n                    word.</p>\n            </li>\n            <li>\n                <p>To create a placeholder for repeating occurrences of an attribute name in an\n                    expression.</p>\n            </li>\n            <li>\n                <p>To prevent special characters in an attribute name from being misinterpreted\n                    in an expression.</p>\n            </li>\n         </ul>\n        <p>Use the <b>#</b> character in an expression to dereference\n            an attribute name. For example, consider the following attribute name:</p>\n        <ul>\n            <li>\n                <p>\n                    <code>Percentile</code>\n                </p>\n            </li>\n         </ul>\n        <p>The name of this attribute conflicts with a reserved word, so it cannot be used\n            directly in an expression. (For the complete list of reserved words, see <a href=\"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html\">Reserved Words</a> in the <i>Amazon DynamoDB Developer\n                Guide</i>). To work around this, you could specify the following for\n                <code>ExpressionAttributeNames</code>:</p>\n        <ul>\n            <li>\n                <p>\n                    <code>{\"#P\":\"Percentile\"}</code>\n                </p>\n            </li>\n         </ul>\n        <p>You could then use this substitution in an expression, as in this example:</p>\n        <ul>\n            <li>\n                <p>\n                    <code>#P = :val</code>\n                </p>\n            </li>\n         </ul>\n        <note>\n            <p>Tokens that begin with the <b>:</b> character are\n                    <i>expression attribute values</i>, which are placeholders for the\n                actual value at runtime.</p>\n        </note>\n        <p>For more information on expression attribute names, see <a href=\"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html\">Accessing Item Attributes</a> in the <i>Amazon DynamoDB Developer\n                Guide</i>.</p>")),
  ){
    KeysAndAttributes.apply
  }.withId(id).addHints(hints)
}